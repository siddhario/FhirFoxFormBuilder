// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FhirFoxFormBuilder
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class UI : UIBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"<!DOCTYPE html>
<html>

  <head>

    <link data-require=""bootstrap-css@3.0.1"" data-semver=""3.0.1"" rel=""stylesheet"" href=""http://netdna.bootstrapcdn.com/bootstrap/3.0.1/css/bootstrap.min.css"" />
	  	<link rel=""stylesheet"" href=""angucomplete-alt.css""/>
    <script src=""http://code.angularjs.org/1.3.0/angular.js"" data-semver=""1.3.0"" data-require=""angular.js@1.3.0""></script>
    <script data-require=""jquery@*"" data-semver=""2.0.3"" src=""http://code.jquery.com/jquery-2.0.3.min.js""></script>
    <script data-require=""bootstrap@3.0.1"" data-semver=""3.0.1"" src=""http://netdna.bootstrapcdn.com/bootstrap/3.0.1/js/bootstrap.min.js""></script>
    <link rel=""stylesheet"" href=""style.css"" />
	 <script src=""ui-bootstrap-tpls-0.12.1.min.js""></script>
	 <script src=""angucomplete-alt.js""></script>
	<link rel=""stylesheet"" href=""style.css"" />

    <script src=""script.js""></script>	
		<script src=""dataFactory.js""></script>	
  </head>

  

  <body ng-app=""myApp"" >
  <div ng-controller=""NewUserController"">
    <h1>");
            
            #line 2 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StrucDef.name!=null?StrucDef.name:""));
            
            #line default
            #line hidden
            this.Write("</h1>\n\t<ul>\t\n\t\t<li><b>Publisher: </b>");
            
            #line 2 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StrucDef.publisher!=null?StrucDef.publisher:""));
            
            #line default
            #line hidden
            this.Write("</li>\n\t\t<li><b>Url: </b><a href=\"");
            
            #line 2 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StrucDef.url!=null?StrucDef.url:""));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 2 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StrucDef.url!=null?StrucDef.url:""));
            
            #line default
            #line hidden
            this.Write("</a></li>\n\t\t<li><b>Description: </b>");
            
            #line 2 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StrucDef.description!=null?StrucDef.description:""));
            
            #line default
            #line hidden
            this.Write("</li>\n\t\t<li><b>Date: </b>");
            
            #line 2 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StrucDef.date!=null?StrucDef.date:""));
            
            #line default
            #line hidden
            this.Write("</li>\n\t\t<li><b>Base: </b><a href=\"");
            
            #line 2 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StrucDef._base!=null?StrucDef._base:""));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 2 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StrucDef._base!=null?StrucDef._base:""));
            
            #line default
            #line hidden
            this.Write("</a></li>\n\t</ul>\n\t\t\n    <form name=\"userForm\" novalidate>\n\t");
            
            #line 2 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
for(int i=0;i<StrucDef.snapshot.element.Length;i++)
	{
		Element el = StrucDef.snapshot.element[i];	
		if(el.type!=null && el.type.Length==1)
		{
			if(el.type[0].code=="code" || el.type[0].code=="CodeableConcept" || el.type[0].code=="string")
			{
					string vsr="";
					if(el.binding!=null && el.binding.valueSetReference!=null )
					{
						vsr = el.binding.valueSetReference.reference; 
					}
				
            
            #line default
            #line hidden
            this.Write("\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t<div class=\"form-group\" " +
                    "show-errors=\'{showSuccess: true}\'>\r\n\t\t\t\t\t\t\t<label class=\"control-label\">");
            
            #line 3 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path));
            
            #line default
            #line hidden
            this.Write("</label>\n\t\t\t\t\t\t\t<div \r\n\t\t\t\t\t\t\t\tname=\"");
            
            #line 4 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path.Replace(".","_")));
            
            #line default
            #line hidden
            this.Write("\" \r\n\t\t\t\t\t\t\t\tangucomplete-alt id=\"ex12\" \r\n\t\t\t\t\t\t\t\tplaceholder=\"");
            
            #line 6 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el._short));
            
            #line default
            #line hidden
            this.Write("\" \r\n\t\t\t\t\t\t\t\tpause=\"100\" \r\n\t\t\t\t\t\t\t\tselected-object=\"");
            
            #line 8 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path.Replace(".","_")));
            
            #line default
            #line hidden
            this.Write("\" \r\n\t\t\t\t\t\t\t\tlocal-data=\"VS_");
            
            #line 9 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path.Replace(".","_")));
            
            #line default
            #line hidden
            this.Write("\" \r\n\t\t\t\t\t\t\t\tsearch-fields=\"display\" \r\n\t\t\t\t\t\t\t\ttitle-field=\"display\" \r\n\t\t\t\t\t\t\t\tmin" +
                    "length=\"1\" \r\n\t\t\t\t\t\t\t\tinput-class=\"form-control form-control-small small-input\" \r" +
                    "\n\t\t\t\t\t\t\t\tmatch-class=\"highlight\" \r\n\t\t\t\t\t\t\t\tfocus-in=\"focusIn(\'VS_");
            
            #line 15 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path.Replace(".","_")));
            
            #line default
            #line hidden
            this.Write("\',\'");
            
            #line 15 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(vsr));
            
            #line default
            #line hidden
            this.Write("\')\" \r\n\t\t\t\t\t\t\t\tfocus-out=\"focusOut()\">\r\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t" +
                    "\t</div>\n\t\t");
            
            #line 17 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
	}
			
			else if(el.type[0].code=="string")
			{
            
            #line default
            #line hidden
            this.Write("\t\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t<div class=\"form-group" +
                    "\" show-errors=\'{showSuccess: true}\'>\r\n\t\t\t\t\t\t\t<label class=\"control-label\">");
            
            #line 18 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path));
            
            #line default
            #line hidden
            this.Write("</label>\r\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" name=\"");
            
            #line 19 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path.Replace(".","_")));
            
            #line default
            #line hidden
            this.Write("\" ng-model=\"");
            
            #line 19 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path));
            
            #line default
            #line hidden
            this.Write("\" ");
            
            #line 19 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
if(el.min==1){
            
            #line default
            #line hidden
            this.Write(" required  ");
            
            #line 19 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
}
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\t\t\t\t\tplaceholder=\"");
            
            #line 20 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el._short));
            
            #line default
            #line hidden
            this.Write("\" />\r\n\t\t\t\t\t\t\t<p class=\"help-block\" ng-if=\"userForm.");
            
            #line 21 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path.Replace(".","_")));
            
            #line default
            #line hidden
            this.Write(".$error.required\">");
            
            #line 21 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path));
            
            #line default
            #line hidden
            this.Write(" field is required</p>\r\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\t");
            
            #line 22 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
} else  if(el.type[0].code=="boolean") 
					{
            
            #line default
            #line hidden
            this.Write("\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t\t<div class=\"form-g" +
                    "roup\" show-errors=\'{showSuccess: true}\'>\r\n\t\t\t\t\t\t\t\t\t<label class=\"control-label\">" +
                    "");
            
            #line 23 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path));
            
            #line default
            #line hidden
            this.Write("</label>\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"form-control\" name" +
                    "=\"");
            
            #line 25 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path.Replace(".","_")));
            
            #line default
            #line hidden
            this.Write("\" ng-model=\"");
            
            #line 25 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path));
            
            #line default
            #line hidden
            this.Write("\" />\r\n\t\t\t\t\t\t\t\t\t<label class=\"help-block\">");
            
            #line 26 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el._short));
            
            #line default
            #line hidden
            this.Write("</label>\r\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\n\n\t\t\t");
            
            #line 27 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
} else  if(el.type[0].code=="integer" || el.type[0].code=="decimal") 
			{
            
            #line default
            #line hidden
            this.Write("\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t<div class=\"form-group\" " +
                    "show-errors=\'{showSuccess: true}\'>\r\n\t\t\t\t\t\t\t<label class=\"control-label\">");
            
            #line 28 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path));
            
            #line default
            #line hidden
            this.Write("</label>\r\n\t\t\t\t\t\t\t<input  type=\"text\" class=\"form-control\" name=\"");
            
            #line 29 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path.Replace(".","_")));
            
            #line default
            #line hidden
            this.Write("\" ng-model=\"");
            
            #line 29 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path));
            
            #line default
            #line hidden
            this.Write("\" ");
            
            #line 29 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
if(el.min==1){
            
            #line default
            #line hidden
            this.Write(" required  ");
            
            #line 29 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
}
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\t\t\t\t\tplaceholder=\"");
            
            #line 30 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el._short));
            
            #line default
            #line hidden
            this.Write("\" integer/>\r\n\t\t\t\t\t\t\t<p class=\"help-block\" ng-if=\"userForm.");
            
            #line 31 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path.Replace(".","_")));
            
            #line default
            #line hidden
            this.Write(".$error.integer\">");
            
            #line 31 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path));
            
            #line default
            #line hidden
            this.Write(" field is not a valid integer</p>\r\n\t\t\t\t\t\t\t<p class=\"help-block\" ng-if=\"userForm.");
            
            #line 32 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path.Replace(".","_")));
            
            #line default
            #line hidden
            this.Write(".$error.required\">");
            
            #line 32 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path));
            
            #line default
            #line hidden
            this.Write(" field is required</p>\r\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\n\t\t\t");
            
            #line 33 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
} else  if(el.type[0].code=="dateTime") 
			{
            
            #line default
            #line hidden
            this.Write("\n\t\t\t<div class=\"row\">\n\t\t\t   <div class=\"col-md-6\">\n\t\t\t\t<div class=\"form-group\" sh" +
                    "ow-errors=\'{showSuccess: true}\' ng-controller=\"DatepickerDemoCtrl\">\n\t\t\t\t\t<label " +
                    "class=\"control-label\">");
            
            #line 33 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path));
            
            #line default
            #line hidden
            this.Write("</label>\n\t\t\t\t\t<p class=\"input-group\">\n\t\t\t\t  <input name=\"");
            
            #line 33 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path.Replace(".","_")));
            
            #line default
            #line hidden
            this.Write("\" type=\"text\" class=\"form-control\" datepicker-popup=\"{{format}}\" ng-model=\"");
            
            #line 33 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path));
            
            #line default
            #line hidden
            this.Write("\" \n\t\t\t\t  is-open=\"opened\" min-date=\"minDate\" max-date=\"\'2015-06-22\'\" datepicker-o" +
                    "ptions=\"dateOptions\" date-disabled=\"disabled(date, mode)\" \n\t\t\t\t  ");
            
            #line 33 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
if(el.min==1){
            
            #line default
            #line hidden
            this.Write("ng-required=\"true\"");
            
            #line 33 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
}
            
            #line default
            #line hidden
            this.Write(" close-text=\"Close\" placeholder=\"");
            
            #line 33 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el._short));
            
            #line default
            #line hidden
            this.Write("\"  />\n\t\t\t\t  <span class=\"input-group-btn\">\n\t\t\t\t\t<button type=\"button\" class=\"btn " +
                    "btn-default\" ng-click=\"open($event)\"><i class=\"glyphicon glyphicon-calendar\"></i" +
                    "></button>\n\t\t\t\t  </span>\n\t\t\t\t  </p>\n\t\t\t  \t\t<p class=\"help-block\" ng-if=\"userForm" +
                    ".");
            
            #line 33 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path.Replace(".","_")));
            
            #line default
            #line hidden
            this.Write(".$error.required\">");
            
            #line 33 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path));
            
            #line default
            #line hidden
            this.Write(" field is required</p>\n\t\t\t\t\t <p class=\"help-block\" ng-if=\"userForm.");
            
            #line 33 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path.Replace(".","_")));
            
            #line default
            #line hidden
            this.Write(".$error.date\">");
            
            #line 33 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(el.path));
            
            #line default
            #line hidden
            this.Write(" field is not a valid date</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t");
            
            #line 33 "C:\FhirFoxFormBuilder\FhirFoxFormBuilder\UI.tt"
}
		}
	  }
            
            #line default
            #line hidden
            this.Write("\n      \n      <button class=\"btn btn-primary\" ng-click=\"save()\">Save</button>\n   " +
                    "   <button class=\"btn btn-link\" ng-click=\"reset()\">Reset</button>\n    </form>\n\t<" +
                    "/div>\n  </body>\n\n</html>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class UIBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
